Module: E:\Work\xilinx\PapilioPro\Next186_SoC\186Code\SDC\sd_fast.asm
GROUP: 'DGROUP' _DATA

File contains no line numbers.
Segment: sd_fast_TEXT WORD USE16 00000000 bytes

Routine Size: 0 bytes,    Routine Base: sd_fast_TEXT + 0000

No disassembly errors

Segment: _DATA WORD USE16 00000000 bytes

Segment: _TEXT BYTE USE16 0000027A bytes

; SD card interface
; Accepts only SDHC cards

.186
public sdinit_
public sdread_
public sdwrite_
public sdsb_


assume cs:_TEXT, ds:_TEXT
_TEXT   SEGMENT BYTE PUBLIC USE16 'CODE'


sdsb_ proc near
    push dx
0000                          sdsb_:
0000    52                        push        dx 

    mov dx, 3dah
0001    BA DA 03                  mov         dx,0x03da 

    call sdsb
0004    E8 31 00                  call        L$2 

    pop dx
0007    5A                        pop         dx 

    shr ax,8
0008    C1 E8 08                  shr         ax,0x08 

    ret
000B    C3                        ret         

sdsb_ endp


sdread_ proc near   ; AX:DX sector, CX:BX buffer, sp1=sectors, returns AX=read sectors
        push bp

Routine Size: 12 bytes,    Routine Base: _TEXT + 0000

000C                          sdread_:
000C    55                        push        bp 

        mov bp,sp
000D    8B EC                     mov         bp,sp 

        push ds       
000F    1E                        push        ds 

        push si
0010    56                        push        si 

        push di
0011    57                        push        di 

        mov es,cx
0012    8E C1                     mov         es,cx 

        mov cx,[bp+4]
0014    8B 4E 04                  mov         cx,word ptr 0x4[bp] 

        call sdread
0017    E8 B0 00                  call        sdread 

        pop di
001A    5F                        pop         di 

        pop si
001B    5E                        pop         si 

        pop ds
001C    1F                        pop         ds 

        pop bp
001D    5D                        pop         bp 

        ret 2
001E    C2 02 00                  ret         0x0002 

sdread_ endp


sdwrite_ proc near   ; AX:DX sector, CX:BX buffer, sp1=sectors, returns AX=read sectors
        push bp

Routine Size: 21 bytes,    Routine Base: _TEXT + 000C

0021                          sdwrite_:
0021    55                        push        bp 

        mov bp,sp
0022    8B EC                     mov         bp,sp 

        push ds       
0024    1E                        push        ds 

        push si
0025    56                        push        si 

        push di
0026    57                        push        di 

        mov es,cx
0027    8E C1                     mov         es,cx 

        mov cx,[bp+4]
0029    8B 4E 04                  mov         cx,word ptr 0x4[bp] 

        call sdwrite
002C    E8 0D 01                  call        sdwrite 

        pop di
002F    5F                        pop         di 

        pop si
0030    5E                        pop         si 

        pop ds
0031    1F                        pop         ds 

        pop bp
0032    5D                        pop         bp 

        ret 2
0033    C2 02 00                  ret         0x0002 

sdwrite_ endp

;---------------------  read/write byte ----------------------
sdrb:   mov al,0ffh
0036                          L$1:
0036    B0 FF                     mov         al,0xff 

sdsb:               ; in AL=byte, DX = 03dah, out AX=result
        out dx,al
0038                          L$2:
0038    EE                        out         dx,al 

        add ax,ax
0039    03 C0                     add         ax,ax 

        out dx,al
003B    EE                        out         dx,al 

        add ax,ax
003C    03 C0                     add         ax,ax 

        out dx,al
003E    EE                        out         dx,al 

        add ax,ax
003F    03 C0                     add         ax,ax 

        out dx,al
0041    EE                        out         dx,al 

        add ax,ax
0042    03 C0                     add         ax,ax 

        out dx,al
0044    EE                        out         dx,al 

        add ax,ax
0045    03 C0                     add         ax,ax 

        out dx,al
0047    EE                        out         dx,al 

        add ax,ax
0048    03 C0                     add         ax,ax 

        out dx,al
004A    EE                        out         dx,al 

        add ax,ax
004B    03 C0                     add         ax,ax 

        out dx,al
004D    EE                        out         dx,al 

        in ax,dx
004E    ED                        in          ax,dx 

        ret
004F    C3                        ret         


;---------------------  write block ----------------------
sdwblk:              ; in SI=data ptr, DX=03dah, CX=size
        shr cx,1
0050                          L$3:
0050    D1 E9                     shr         cx,0x01 

sdwblk1:
        lodsb
0052                          L$4:
0052    AC                        lodsb       

        out dx,al
0053    EE                        out         dx,al 

        add ax,ax
0054    03 C0                     add         ax,ax 

        out dx,al
0056    EE                        out         dx,al 

        add ax,ax
0057    03 C0                     add         ax,ax 

        out dx,al
0059    EE                        out         dx,al 

        add ax,ax
005A    03 C0                     add         ax,ax 

        out dx,al
005C    EE                        out         dx,al 

        add ax,ax
005D    03 C0                     add         ax,ax 

        out dx,al
005F    EE                        out         dx,al 

        add ax,ax
0060    03 C0                     add         ax,ax 

        out dx,al
0062    EE                        out         dx,al 

        add ax,ax
0063    03 C0                     add         ax,ax 

        out dx,al
0065    EE                        out         dx,al 

        add ax,ax
0066    03 C0                     add         ax,ax 

        out dx,al
0068    EE                        out         dx,al 

        lodsb
0069    AC                        lodsb       

        out dx,al
006A    EE                        out         dx,al 

        add ax,ax
006B    03 C0                     add         ax,ax 

        out dx,al
006D    EE                        out         dx,al 

        add ax,ax
006E    03 C0                     add         ax,ax 

        out dx,al
0070    EE                        out         dx,al 

        add ax,ax
0071    03 C0                     add         ax,ax 

        out dx,al
0073    EE                        out         dx,al 

        add ax,ax
0074    03 C0                     add         ax,ax 

        out dx,al
0076    EE                        out         dx,al 

        add ax,ax
0077    03 C0                     add         ax,ax 

        out dx,al
0079    EE                        out         dx,al 

        add ax,ax
007A    03 C0                     add         ax,ax 

        out dx,al
007C    EE                        out         dx,al 

        add ax,ax
007D    03 C0                     add         ax,ax 

        out dx,al
007F    EE                        out         dx,al 

        loop sdwblk1
0080    E2 D0                     loop        L$4 

        ret
0082    C3                        ret         


;---------------------  read block ----------------------
sdrblk:              ; in DI=data ptr, DX=03dah, CX=size
        mov al,0ffh
0083                          L$5:
0083    B0 FF                     mov         al,0xff 

        out dx,al
0085    EE                        out         dx,al 

        shr cx,1
0086    D1 E9                     shr         cx,0x01 

        out dx,al
0088    EE                        out         dx,al 

        jmp sdrblk2 
0089    EB 05                     jmp         L$7 

sdrblk1:
        out dx,al
008B                          L$6:
008B    EE                        out         dx,al 

        mov [di],ah
008C    88 25                     mov         byte ptr [di],ah 

        out dx,al
008E    EE                        out         dx,al 

        inc di
008F    47                        inc         di 

sdrblk2:
        out dx,al
0090                          L$7:
0090    EE                        out         dx,al 

        nop
0091    90                        nop         

        out dx,al
0092    EE                        out         dx,al 

        nop
0093    90                        nop         

        out dx,al
0094    EE                        out         dx,al 

        nop
0095    90                        nop         

        out dx,al
0096    EE                        out         dx,al 

        nop
0097    90                        nop         

        out dx,al
0098    EE                        out         dx,al 

        nop
0099    90                        nop         

        out dx,al
009A    EE                        out         dx,al 

        in ax,dx
009B    ED                        in          ax,dx 

        out dx,al
009C    EE                        out         dx,al 

        mov [di],ah
009D    88 25                     mov         byte ptr [di],ah 

        out dx,al
009F    EE                        out         dx,al 

        inc di
00A0    47                        inc         di 

        out dx,al
00A1    EE                        out         dx,al 

        nop
00A2    90                        nop         

        out dx,al
00A3    EE                        out         dx,al 

        nop
00A4    90                        nop         

        out dx,al
00A5    EE                        out         dx,al 

        nop
00A6    90                        nop         

        out dx,al
00A7    EE                        out         dx,al 

        nop
00A8    90                        nop         

        out dx,al
00A9    EE                        out         dx,al 

        nop
00AA    90                        nop         

        out dx,al
00AB    EE                        out         dx,al 

        in ax,dx
00AC    ED                        in          ax,dx 

        loop sdrblk1
00AD    E2 DC                     loop        L$6 

        mov [di],ah
00AF    88 25                     mov         byte ptr [di],ah 

        inc di
00B1    47                        inc         di 

        ret
00B2    C3                        ret         


;---------------------  write command ----------------------
sdcmd8T:
        call sdrb
00B3                          L$8:
00B3    E8 80 FF                  call        L$1 

sdcmd:              ; in SI=6 bytes cmd buffer, DX=03dah, out AH = 0ffh on error
        mov cx,6
00B6                          L$9:
00B6    B9 06 00                  mov         cx,0x0006 

        call sdwblk
00B9    E8 94 FF                  call        L$3 

sdresp:
        xor si,si
00BC                          L$10:
00BC    33 F6                     xor         si,si 

sdresp1:
        call sdrb
00BE                          L$11:
00BE    E8 75 FF                  call        L$1 

        inc si
00C1    46                        inc         si 

        jz sdcmd1
00C2    74 05                     je          L$12 

        cmp ah,0ffh
00C4    80 FC FF                  cmp         ah,0xff 

        je sdresp1
00C7    74 F5                     je          L$11 

sdcmd1: ret         
00C9                          L$12:
00C9    C3                        ret         


;---------------------  read ----------------------
sdread proc near   ; AX:DX sector, ES:BX buffer, CX=sectors, returns AX=read sectors
        push ax
00CA                          sdread:
00CA    50                        push        ax 

        mov al,dl
00CB    8A C2                     mov         al,dl 

        push ax
00CD    50                        push        ax 

        mov dl,51h  ; CMD17
00CE    B2 51                     mov         dl,0x51 

        cmp cx,1
00D0    83 F9 01                  cmp         cx,0x0001 

        je sdr1s
00D3    74 01                     je          L$13 

        inc dx      ; CMD18 - multiple sectors
00D5    42                        inc         dx 

sdr1s:
        push dx
00D6                          L$13:
00D6    52                        push        dx 

        mov si,sp
00D7    8B F4                     mov         si,sp 


        mov dx,3dah
00D9    BA DA 03                  mov         dx,0x03da 

        mov ah,1
00DC    B4 01                     mov         ah,0x01 

        out dx,ax       ; CS on
00DE    EF                        out         dx,ax 

        mov di,bx
00DF    8B FB                     mov         di,bx 

        mov bx,cx
00E1    8B D9                     mov         bx,cx 

        mov bp,cx       ; save sectors number
00E3    8B E9                     mov         bp,cx 

        push ss
00E5    16                        push        ss 

        pop ds
00E6    1F                        pop         ds 

        mov byte ptr [si+5], 0ffh 
00E7    C6 44 05 FF               mov         byte ptr 0x5[si],0xff 

        call sdcmd
00EB    E8 C8 FF                  call        L$9 

        add sp,6
00EE    83 C4 06                  add         sp,0x0006 

        or ah,ah
00F1    0A E4                     or          ah,ah 

        jnz sdr1        ; error
00F3    75 3C                     jne         L$16 

        push es
00F5    06                        push        es 

        pop ds
00F6    1F                        pop         ds 

sdrms:
        mov ax,di
00F7                          L$14:
00F7    8B C7                     mov         ax,di 

        shr ax,4
00F9    C1 E8 04                  shr         ax,0x04 

        mov si,ds
00FC    8C DE                     mov         si,ds 

        add ax,si
00FE    03 C6                     add         ax,si 

        mov ds,ax
0100    8E D8                     mov         ds,ax 

        and di,15
0102    83 E7 0F                  and         di,0x000f 

        call sdresp     ; wait for 0feh token
0105    E8 B4 FF                  call        L$10 

        cmp ah,0feh
0108    80 FC FE                  cmp         ah,0xfe 

        jne sdr1        ; read token error 
010B    75 24                     jne         L$16 

        mov ch,2        ; 512 byte sector
010D    B5 02                     mov         ch,0x02 

        call sdrblk
010F    E8 71 FF                  call        L$5 

        call sdrb       ; ignore CRC
0112    E8 21 FF                  call        L$1 

        call sdrb       ; ignore CRC
0115    E8 1E FF                  call        L$1 

        dec bx
0118    4B                        dec         bx 

        jnz sdrms       ; multiple sectors
0119    75 DC                     jne         L$14 

        cmp bp,1
011B    83 FD 01                  cmp         bp,0x0001 

        je sdr1         ; single sector
011E    74 11                     je          L$16 

        mov si, offset SD_CMD12 ; stop transfer
0120    BE 62 02                  mov         si,offset L$28 

        push cs
0123    0E                        push        cs 

        pop ds
0124    1F                        pop         ds 

        call sdcmd
0125    E8 8E FF                  call        L$9 

sdr2:
        shr ah,1
0128                          L$15:
0128    D0 EC                     shr         ah,0x01 

        jnc sdr1
012A    73 05                     jae         L$16 

        call sdrb
012C    E8 07 FF                  call        L$1 

        jmp sdr2
012F    EB F7                     jmp         L$15 

sdr1:       
        xor ax,ax
0131                          L$16:
0131    33 C0                     xor         ax,ax 

        out dx,ax
0133    EF                        out         dx,ax 

        call sdrb       ; 8T
0134    E8 FF FE                  call        L$1 

        mov ax,bp
0137    8B C5                     mov         ax,bp 

        sub ax,bx
0139    2B C3                     sub         ax,bx 

        ret     
013B    C3                        ret         

sdread endp


;---------------------  write ----------------------
sdwrite proc near   ; AX:DX sector, ES:BX buffer, CX=sectors, returns AX=read sectors
        push ax
013C                          sdwrite:
013C    50                        push        ax 

        mov al,dl
013D    8A C2                     mov         al,dl 

        push ax
013F    50                        push        ax 

        mov dl,58h  ; CMD24
0140    B2 58                     mov         dl,0x58 

        cmp cx,1
0142    83 F9 01                  cmp         cx,0x0001 

        je sdw1s
0145    74 01                     je          L$17 

        inc dx      ; CMD25 - multiple sectors
0147    42                        inc         dx 

sdw1s:
        push dx
0148                          L$17:
0148    52                        push        dx 

        mov si,sp 
0149    8B F4                     mov         si,sp 


        mov dx,3dah
014B    BA DA 03                  mov         dx,0x03da 

        mov ah,1
014E    B4 01                     mov         ah,0x01 

        out dx,ax       ; CS on
0150    EF                        out         dx,ax 

        mov bp,cx       ; save sectors number
0151    8B E9                     mov         bp,cx 

        push ss
0153    16                        push        ss 

        pop ds
0154    1F                        pop         ds 

        call sdcmd
0155    E8 5E FF                  call        L$9 

        add sp,6
0158    83 C4 06                  add         sp,0x0006 

        mov si,bx
015B    8B F3                     mov         si,bx 

        mov bx,bp
015D    8B DD                     mov         bx,bp 

        or ah,ah
015F    0A E4                     or          ah,ah 

        jnz sdr1        ; error
0161    75 CE                     jne         L$16 

        push es
0163    06                        push        es 

        pop ds
0164    1F                        pop         ds 

sdwms:
        mov ax,si
0165                          L$18:
0165    8B C6                     mov         ax,si 

        shr ax,4
0167    C1 E8 04                  shr         ax,0x04 

        mov di,ds
016A    8C DF                     mov         di,ds 

        add ax,di
016C    03 C7                     add         ax,di 

        mov ds,ax
016E    8E D8                     mov         ds,ax 

        and si,15
0170    83 E6 0F                  and         si,0x000f 

        mov al,0feh       ; start token
0173    B0 FE                     mov         al,0xfe 

        cmp bp,1
0175    83 FD 01                  cmp         bp,0x0001 

        je sdw1s1
0178    74 02                     je          L$19 

        mov al,0fch     ; multiple sectors
017A    B0 FC                     mov         al,0xfc 

sdw1s1:        
        call sdsb     
017C                          L$19:
017C    E8 B9 FE                  call        L$2 

        mov ch,2        ; 512 byte sector
017F    B5 02                     mov         ch,0x02 

        call sdwblk
0181    E8 CC FE                  call        L$3 

        call sdrb       ; ignore CRC
0184    E8 AF FE                  call        L$1 

        call sdrb       ; ignore CRC
0187    E8 AC FE                  call        L$1 

        call sdrb       ; read response byte xxx00101
018A    E8 A9 FE                  call        L$1 

        and ah,0eh
018D    80 E4 0E                  and         ah,0x0e 

        cmp ah,4
0190    80 FC 04                  cmp         ah,0x04 

        jne sdr1        ; write error
0193    75 9C                     jne         L$16 

sdwwait:
        call sdrb
0195                          L$20:
0195    E8 9E FE                  call        L$1 

        shr ah,1
0198    D0 EC                     shr         ah,0x01 

        jnc sdwwait     ; wait write completion
019A    73 F9                     jae         L$20 

        dec bx
019C    4B                        dec         bx 

        jnz sdwms       ; multiple sectors
019D    75 C6                     jne         L$18 


        cmp bp,1
019F    83 FD 01                  cmp         bp,0x0001 

        je sdr1
01A2    74 8D                     je          L$16 

        mov al,0fdh     ; multiple end transfer
01A4    B0 FD                     mov         al,0xfd 

        call sdsb      
01A6    E8 8F FE                  call        L$2 

sdwwait1:
        call sdrb
01A9                          L$21:
01A9    E8 8A FE                  call        L$1 

        shr ah,1
01AC    D0 EC                     shr         ah,0x01 

        jnc sdwwait1      ; wait write completion
01AE    73 F9                     jae         L$21 

        jmp sdr1
01B0    E9 7E FF                  jmp         L$16 

sdwrite endp
        
;---------------------  init SD ----------------------
sdinit_ proc near       ; returns AX = num kilosectors
        push ds

Routine Size: 402 bytes,    Routine Base: _TEXT + 0021

01B3                          sdinit_:
01B3    1E                        push        ds 

        push cx
01B4    51                        push        cx 

        push dx
01B5    52                        push        dx 

        push si
01B6    56                        push        si 

        push di
01B7    57                        push        di 

        mov dx,3dah
01B8    BA DA 03                  mov         dx,0x03da 

        mov cx,10
01BB    B9 0A 00                  mov         cx,0x000a 

sdinit1:                   ; send 80T
        call sdrb
01BE                          L$22:
01BE    E8 75 FE                  call        L$1 

        loop sdinit1
01C1    E2 FB                     loop        L$22 


        mov ah,1
01C3    B4 01                     mov         ah,0x01 

        out dx,ax       ; select SD
01C5    EF                        out         dx,ax 


        mov si, offset SD_CMD0
01C6    BE 50 02                  mov         si,offset L$25 

        push cs
01C9    0E                        push        cs 

        pop ds
01CA    1F                        pop         ds 

        call sdcmd
01CB    E8 E8 FE                  call        L$9 

        dec ah
01CE    FE CC                     dec         ah 

        jnz sdexit      ; error
01D0    75 70                     jne         L$24 

        
        mov si, offset SD_CMD8
01D2    BE 56 02                  mov         si,offset L$26 

        call sdcmd8T
01D5    E8 DB FE                  call        L$8 

        dec ah
01D8    FE CC                     dec         ah 

        jnz sdexit      ; error
01DA    75 66                     jne         L$24 

        mov cl,4
01DC    B1 04                     mov         cl,0x04 

        sub sp,cx
01DE    2B E1                     sub         sp,cx 

        mov di,sp
01E0    8B FC                     mov         di,sp 

        push ss
01E2    16                        push        ss 

        pop ds
01E3    1F                        pop         ds 

        call sdrblk
01E4    E8 9C FE                  call        L$5 

        pop ax
01E7    58                        pop         ax 

        pop ax
01E8    58                        pop         ax 

        cmp ah,0aah
01E9    80 FC AA                  cmp         ah,0xaa 

        jne sdexit      ; CMD8 error
01EC    75 54                     jne         L$24 

repinit:        
        mov si, offset SD_CMD55
01EE                          L$23:
01EE    BE 6E 02                  mov         si,offset L$30 

        push cs
01F1    0E                        push        cs 

        pop ds
01F2    1F                        pop         ds 

        call sdcmd8T
01F3    E8 BD FE                  call        L$8 

        call sdrb
01F6    E8 3D FE                  call        L$1 

        mov si, offset SD_CMD41
01F9    BE 68 02                  mov         si,offset L$29 

        call sdcmd
01FC    E8 B7 FE                  call        L$9 

        dec ah
01FF    FE CC                     dec         ah 

        jz  repinit
0201    74 EB                     je          L$23 

        
        mov si, offset SD_CMD58
0203    BE 74 02                  mov         si,offset L$31 

        call sdcmd8T
0206    E8 AA FE                  call        L$8 

        mov cl,4
0209    B1 04                     mov         cl,0x04 

        sub sp,cx
020B    2B E1                     sub         sp,cx 

        mov di,sp
020D    8B FC                     mov         di,sp 

        push ss
020F    16                        push        ss 

        pop ds
0210    1F                        pop         ds 

        call sdrblk
0211    E8 6F FE                  call        L$5 

        pop ax
0214    58                        pop         ax 

        test al,40h     ; test OCR bit 30 (CCS)
0215    A8 40                     test        al,0x40 

        pop ax
0217    58                        pop         ax 

        jz sdexit       ; no SDHC
0218    74 28                     je          L$24 


        mov si, offset SD_CMD9 ; get size info
021A    BE 5C 02                  mov         si,offset L$27 

        push cs
021D    0E                        push        cs 

        pop ds
021E    1F                        pop         ds 

        call sdcmd8T
021F    E8 91 FE                  call        L$8 

        or ah,ah
0222    0A E4                     or          ah,ah 

        jnz sdexit
0224    75 1C                     jne         L$24 

        call sdresp     ; wait for 0feh token
0226    E8 93 FE                  call        L$10 

        cmp ah,0feh
0229    80 FC FE                  cmp         ah,0xfe 

        jne sdexit
022C    75 14                     jne         L$24 

        mov cl,18       ; 16bytes + 2bytes CRC
022E    B1 12                     mov         cl,0x12 

        sub sp,cx
0230    2B E1                     sub         sp,cx 

        mov di,sp
0232    8B FC                     mov         di,sp 

        push ss
0234    16                        push        ss 

        pop ds
0235    1F                        pop         ds 

        call sdrblk
0236    E8 4A FE                  call        L$5 

        mov cx,[di-10]
0239    8B 4D F6                  mov         cx,word ptr -0xa[di] 

        rol cx,8
023C    C1 C1 08                  rol         cx,0x08 

        inc cx
023F    41                        inc         cx 

        mov sp,di
0240    8B E7                     mov         sp,di 

sdexit: 
        xor ax,ax       ; raise CS
0242                          L$24:
0242    33 C0                     xor         ax,ax 

        out dx,ax
0244    EF                        out         dx,ax 

        call sdrb
0245    E8 EE FD                  call        L$1 

        pop di
0248    5F                        pop         di 

        pop si
0249    5E                        pop         si 

        pop dx
024A    5A                        pop         dx 

        mov ax,cx       
024B    8B C1                     mov         ax,cx 

        pop cx
024D    59                        pop         cx 

        pop ds
024E    1F                        pop         ds 

        ret
024F    C3                        ret         
0250                          L$25:
0250    40 00 00 00 00 95                               @.....
0256                          L$26:
0256    48 00 00 01 AA 87                               H.....
025C                          L$27:
025C    49 00 00 00 00 FF                               I.....
0262                          L$28:
0262    4C 00 00 00 00 FF                               L.....
0268                          L$29:
0268    69 40 00 00 00 FF                               i@....
026E                          L$30:
026E    77 00 00 00 00 FF                               w.....
0274                          L$31:
0274    7A 00 00 00 00 FF                               z.....

Routine Size: 199 bytes,    Routine Base: _TEXT + 01B3

No disassembly errors

